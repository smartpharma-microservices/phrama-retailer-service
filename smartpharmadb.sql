-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

create schema customer_schema;
create schema dms_schema;
create schema oms_schema;
create schema rms_inventory_schema;
create schema rms_shcema;
create schema agent_schema;
create schema staff_schema;
create schema product_schema;


 
CREATE TABLE IF NOT EXISTS agent_schema.address
(
    address_guid uuid NOT NULL,
    address_line1 text COLLATE pg_catalog."default" NOT NULL,
    address_line2 text COLLATE pg_catalog."default" NOT NULL,
    address_line3 text COLLATE pg_catalog."default" NOT NULL,
    city text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default" NOT NULL,
    postal_code bigint NOT NULL,
    agent_guid uuid NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (address_guid)
);

CREATE TABLE IF NOT EXISTS agent_schema.agent
(
    agent_guid uuid NOT NULL,
    agent_code bigint NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    middle_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    dob date NOT NULL,
    gender text COLLATE pg_catalog."default" NOT NULL,
    registration_date date NOT NULL,
    last_login date NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT agent_pkey PRIMARY KEY (agent_guid)
);

CREATE TABLE IF NOT EXISTS agent_schema.contact
(
    contact_guid uuid NOT NULL,
    contact_type text COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    agent_guid uuid NOT NULL,
    CONSTRAINT contact_pkey PRIMARY KEY (contact_guid)
);

CREATE TABLE IF NOT EXISTS customer_schema.address
(
    address_id integer NOT NULL,
    line1 text COLLATE pg_catalog."default" NOT NULL,
    line2 text COLLATE pg_catalog."default" NOT NULL,
    line3 text COLLATE pg_catalog."default" NOT NULL,
    city text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default" NOT NULL,
    postal_code text COLLATE pg_catalog."default" NOT NULL,
    customer_id integer,
    CONSTRAINT address_pkey PRIMARY KEY (address_id)
);

CREATE TABLE IF NOT EXISTS customer_schema.contact
(
    contact_id integer NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL,
    CONSTRAINT contact_pkey PRIMARY KEY (contact_id)
);

CREATE TABLE IF NOT EXISTS customer_schema.customer
(
    customer_id integer NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    middle_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    date_of_birth date NOT NULL,
    gender text COLLATE pg_catalog."default" NOT NULL,
    address_id integer NOT NULL,
    CONSTRAINT customer_pkey PRIMARY KEY (customer_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.address
(
    address_uid uuid NOT NULL,
    address_line1 text COLLATE pg_catalog."default" NOT NULL,
    address_line2 text COLLATE pg_catalog."default" NOT NULL,
    address_line3 text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default" NOT NULL,
    postal_code bigint NOT NULL,
    store_id text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (address_uid)
);

CREATE TABLE IF NOT EXISTS dms_schema.agent
(
    agent_id bigint NOT NULL,
    first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    area character varying(255) COLLATE pg_catalog."default" NOT NULL,
    agent_code character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_login_date timestamp(6) without time zone NOT NULL,
    address_uid uuid NOT NULL,
    contact_uid uuid NOT NULL,
    store_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT agent_pkey PRIMARY KEY (agent_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.connect_status
(
    connect_status_id integer NOT NULL,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT connect_status_pkey PRIMARY KEY (connect_status_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.contact
(
    contact_uid uuid NOT NULL,
    contact_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "number" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    store_id text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT contact_pkey PRIMARY KEY (contact_uid)
);

CREATE TABLE IF NOT EXISTS dms_schema.licence
(
    licence_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    licence_code character varying(255) COLLATE pg_catalog."default",
    valid_from timestamp(6) without time zone,
    valid_to timestamp(6) without time zone NOT NULL,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp(6) without time zone,
    licence_type_id integer NOT NULL,
    store_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    supplier_guid character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT licence_pkey PRIMARY KEY (licence_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.licence_type
(
    licence_type_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT licence_type_pkey PRIMARY KEY (licence_type_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.rating
(
    rating_id bigint NOT NULL,
    rating double precision NOT NULL,
    last_updated_date timestamp(6) without time zone NOT NULL,
    sequence integer NOT NULL,
    rating_sum double precision NOT NULL,
    store_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT rating_pkey PRIMARY KEY (rating_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.store
(
    store_uid text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    store_type_id integer NOT NULL,
    area character varying(255) COLLATE pg_catalog."default" NOT NULL,
    supplier_guid character varying(255) COLLATE pg_catalog."default",
    gst_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    store_code bigint NOT NULL,
    CONSTRAINT store_pkey PRIMARY KEY (store_uid)
);

CREATE TABLE IF NOT EXISTS dms_schema.store_type
(
    store_type_id integer NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT store_type_pkey PRIMARY KEY (store_type_id)
);

CREATE TABLE IF NOT EXISTS dms_schema.supplier
(
    supplier_guid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    company_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    registration_code character varying(255) COLLATE pg_catalog."default",
    tan_number character varying(255) COLLATE pg_catalog."default",
    gst_number character varying(255) COLLATE pg_catalog."default",
    created_by character varying(255) COLLATE pg_catalog."default",
    created_date timestamp(6) without time zone,
    updated_by character varying(255) COLLATE pg_catalog."default",
    updated_date timestamp(6) without time zone,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_login_date date NOT NULL,
    supplier_code bigint NOT NULL,
    CONSTRAINT supplier_pkey PRIMARY KEY (supplier_guid)
);

CREATE TABLE IF NOT EXISTS dms_schema.supplier_retailer
(
    connect_retailer_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tp_retailer_code character varying(255) COLLATE pg_catalog."default",
    retailer_guid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    connect_status_id integer NOT NULL,
    store_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    priority integer,
    tp_supplier_code character varying(255) COLLATE pg_catalog."default",
    requested_by character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT supplier_retailer_pkey PRIMARY KEY (connect_retailer_id)
);

CREATE TABLE IF NOT EXISTS oms_schema.items
(
    item_id bigint NOT NULL,
    product_code bigint NOT NULL,
    display_name text COLLATE pg_catalog."default" NOT NULL,
    quantity double precision NOT NULL,
    mrp double precision NOT NULL,
    ptr double precision NOT NULL,
    order_guid uuid NOT NULL,
    sub_total_value double precision NOT NULL,
    CONSTRAINT items_pkey PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS oms_schema.order_history
(
    history_id bigint NOT NULL,
    event_description text COLLATE pg_catalog."default",
    event_timestamp timestamp without time zone NOT NULL,
    event_source text COLLATE pg_catalog."default" NOT NULL,
    updated_by text COLLATE pg_catalog."default" NOT NULL,
    order_guid uuid NOT NULL,
    event_type integer NOT NULL,
    new_state text COLLATE pg_catalog."default",
    previous_state text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT order_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS oms_schema.orders
(
    order_guid uuid NOT NULL,
    total_products integer NOT NULL,
    total_quantity double precision NOT NULL,
    total_order_value double precision NOT NULL,
    total_gst_value double precision NOT NULL,
    payment_status text COLLATE pg_catalog."default" NOT NULL,
    is_favourite boolean,
    created_by text COLLATE pg_catalog."default" NOT NULL,
    source_type text COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp without time zone NOT NULL,
    status_code integer NOT NULL,
    order_code bigint NOT NULL,
    CONSTRAINT orders_pkey PRIMARY KEY (order_guid)
);

CREATE TABLE IF NOT EXISTS oms_schema.rating
(
    rating_id bigint NOT NULL,
    rating double precision NOT NULL,
    feed_back text COLLATE pg_catalog."default" NOT NULL,
    order_guid uuid NOT NULL,
    CONSTRAINT rating_pkey PRIMARY KEY (rating_id)
);

CREATE TABLE IF NOT EXISTS oms_schema.status
(
    status_code integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT status_pkey PRIMARY KEY (status_code)
);

CREATE TABLE IF NOT EXISTS oms_schema.supplier_retailer
(
    supplier_retailer_id bigint NOT NULL,
    retailer_code bigint NOT NULL,
    supplier_code bigint NOT NULL,
    supplier_store_code bigint NOT NULL,
    retailer_store_code bigint NOT NULL,
    order_guid uuid NOT NULL,
    CONSTRAINT supplier_retailer_pkey PRIMARY KEY (supplier_retailer_id)
);

CREATE TABLE IF NOT EXISTS product_schema.category
(
    category_id integer NOT NULL,
    category_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT category_pkey PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS product_schema.product
(
    product_uid text COLLATE pg_catalog."default" NOT NULL,
    product_code bigint NOT NULL,
    product_name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    type_id integer NOT NULL,
    category_id integer NOT NULL,
    hsn_code bigint NOT NULL,
    manufacturer_name text COLLATE pg_catalog."default",
    manufacturer_code bigint NOT NULL,
    created_date date NOT NULL,
    patent_company text COLLATE pg_catalog."default" NOT NULL,
    patent_date integer NOT NULL,
    CONSTRAINT product_pkey PRIMARY KEY (product_uid)
);

CREATE TABLE IF NOT EXISTS product_schema.product_type
(
    type_id integer NOT NULL,
    type_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT product_type_pkey PRIMARY KEY (type_id)
);

CREATE TABLE IF NOT EXISTS rms_inventory_schema.retailer_product
(
    retailer_product_uid uuid NOT NULL,
    retailer_code bigint NOT NULL,
    quantity integer NOT NULL,
    ptr double precision NOT NULL,
    mrp double precision NOT NULL,
    product_code bigint NOT NULL,
    store_code bigint NOT NULL,
    re_order_level integer NOT NULL,
    expiry_date date NOT NULL,
    manufactured_date date NOT NULL,
    product_name text COLLATE pg_catalog."default",
    CONSTRAINT retailerproduct_pkey PRIMARY KEY (retailer_product_uid)
);

CREATE TABLE IF NOT EXISTS rms_inventory_schema.stock
(
    stock_id bigint NOT NULL,
    stock_in integer NOT NULL,
    stock_out integer NOT NULL,
    last_updated_date timestamp without time zone NOT NULL,
    retailer_product_uid uuid NOT NULL,
    CONSTRAINT stock_pkey PRIMARY KEY (stock_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.address
(
    address_id integer NOT NULL,
    line1 text COLLATE pg_catalog."default" NOT NULL,
    line2 text COLLATE pg_catalog."default" NOT NULL,
    line3 text COLLATE pg_catalog."default" NOT NULL,
    city text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default" NOT NULL,
    postal_code text COLLATE pg_catalog."default" NOT NULL,
    store_id uuid NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (address_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.connect_status
(
    connect_status_id integer NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT connect_status_pkey PRIMARY KEY (connect_status_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.connect_supplier
(
    connect_supplier_id integer NOT NULL,
    priority integer,
    is_favourite boolean,
    tp_supplier_code text COLLATE pg_catalog."default",
    supplier_guid integer,
    connect_status_id integer NOT NULL,
    store_id uuid NOT NULL,
    CONSTRAINT connect_supplier_pkey PRIMARY KEY (connect_supplier_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.contact
(
    contact_id integer NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    store_id uuid NOT NULL,
    CONSTRAINT contact_pkey PRIMARY KEY (contact_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.licence
(
    licence_id integer NOT NULL,
    description text COLLATE pg_catalog."default",
    licence_code text COLLATE pg_catalog."default",
    valid_from date,
    valid_to date NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp without time zone,
    licence_type_id integer NOT NULL,
    store_id uuid NOT NULL,
    CONSTRAINT licence_pkey PRIMARY KEY (licence_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.licence_type
(
    licence_type_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT licence_type_pkey PRIMARY KEY (licence_type_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.retailer
(
    retailer_guid uuid NOT NULL,
    retailer_company text COLLATE pg_catalog."default" NOT NULL,
    registration_code text COLLATE pg_catalog."default",
    tan_number text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    owner_name text COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp without time zone NOT NULL,
    updated_date timestamp without time zone NOT NULL,
    retailer_code bigint NOT NULL,
    CONSTRAINT retailer_pkey PRIMARY KEY (retailer_guid)
);

CREATE TABLE IF NOT EXISTS rms_schema.retailer_product
(
    retailer_product_uid text COLLATE pg_catalog."default" NOT NULL,
    retailer_code bigint NOT NULL,
    quantity integer NOT NULL,
    ptr double precision NOT NULL,
    mrp double precision NOT NULL,
    product_code bigint NOT NULL,
    store_code bigint NOT NULL,
    re_order_level integer NOT NULL,
    expiry_date date NOT NULL,
    manufactured_date date NOT NULL,
    product_name text COLLATE pg_catalog."default",
    CONSTRAINT retailerproduct_pkey PRIMARY KEY (retailer_product_uid)
);

CREATE TABLE IF NOT EXISTS rms_schema.stock
(
    stock_id bigint NOT NULL,
    stock_in integer NOT NULL,
    stock_out integer NOT NULL,
    last_updated_date timestamp without time zone NOT NULL,
    retailer_product_uid text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT stock_pkey PRIMARY KEY (stock_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.store
(
    store_id uuid NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default",
    store_type_id integer,
    area text COLLATE pg_catalog."default" NOT NULL,
    retailer_guid uuid,
    gstn_number text COLLATE pg_catalog."default" NOT NULL,
    store_code bigint NOT NULL,
    CONSTRAINT store_pkey PRIMARY KEY (store_id)
);

CREATE TABLE IF NOT EXISTS rms_schema.store_type
(
    store_type_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT store_type_pkey PRIMARY KEY (store_type_id)
);

CREATE TABLE IF NOT EXISTS staff_schema.address
(
    address_guid uuid NOT NULL,
    line1 text COLLATE pg_catalog."default" NOT NULL,
    line2 text COLLATE pg_catalog."default" NOT NULL,
    line3 text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default" NOT NULL,
    state text COLLATE pg_catalog."default" NOT NULL,
    postal_code text COLLATE pg_catalog."default" NOT NULL,
    staff_guid uuid NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (address_guid)
);

CREATE TABLE IF NOT EXISTS staff_schema.contact
(
    contact_guid uuid NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    staff_guid uuid NOT NULL,
    CONSTRAINT contact_pkey PRIMARY KEY (contact_guid)
);

CREATE TABLE IF NOT EXISTS staff_schema.staff
(
    staff_guid uuid NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    middle_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default" NOT NULL,
    date_of_birth date NOT NULL,
    gender text COLLATE pg_catalog."default" NOT NULL,
    age integer NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    "position" text COLLATE pg_catalog."default" NOT NULL,
    salary double precision NOT NULL,
    CONSTRAINT staff_pkey PRIMARY KEY (staff_guid)
);

ALTER TABLE IF EXISTS customer_schema.contact
    ADD CONSTRAINT contact_customer_rel FOREIGN KEY (customer_id)
    REFERENCES customer_schema.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS customer_schema.customer
    ADD CONSTRAINT customer_address_rel FOREIGN KEY (address_id)
    REFERENCES customer_schema.address (address_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS dms_schema.address
    ADD CONSTRAINT address_store_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS dms_schema.agent
    ADD CONSTRAINT agent_address_uid_fkey FOREIGN KEY (address_uid)
    REFERENCES dms_schema.address (address_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.agent
    ADD CONSTRAINT agent_contact_uid_fkey FOREIGN KEY (contact_uid)
    REFERENCES dms_schema.contact (contact_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.agent
    ADD CONSTRAINT agent_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.contact
    ADD CONSTRAINT contact_store_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS dms_schema.licence
    ADD CONSTRAINT fkgjgxharfmp04umih32derw5cb FOREIGN KEY (supplier_guid)
    REFERENCES dms_schema.supplier (supplier_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.licence
    ADD CONSTRAINT licence_licence_type_id_fkey FOREIGN KEY (licence_type_id)
    REFERENCES dms_schema.licence_type (licence_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.licence
    ADD CONSTRAINT licence_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.rating
    ADD CONSTRAINT rating_store_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.store
    ADD CONSTRAINT store_store_type_id_fkey FOREIGN KEY (store_type_id)
    REFERENCES dms_schema.store_type (store_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.store
    ADD CONSTRAINT store_supplier_guid_fkey FOREIGN KEY (supplier_guid)
    REFERENCES dms_schema.supplier (supplier_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS dms_schema.supplier_retailer
    ADD CONSTRAINT supplier_retailer_connect_status_id_fkey FOREIGN KEY (connect_status_id)
    REFERENCES dms_schema.connect_status (connect_status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS dms_schema.supplier_retailer
    ADD CONSTRAINT supplier_retailer_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES dms_schema.store (store_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS oms_schema.items
    ADD CONSTRAINT order_order_item_rel FOREIGN KEY (order_guid)
    REFERENCES oms_schema.orders (order_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS oms_schema.order_history
    ADD CONSTRAINT order__history_rel FOREIGN KEY (order_guid)
    REFERENCES oms_schema.orders (order_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS oms_schema.orders
    ADD CONSTRAINT orders_status_rel FOREIGN KEY (status_code)
    REFERENCES oms_schema.status (status_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS oms_schema.rating
    ADD CONSTRAINT order_rating_rel FOREIGN KEY (order_guid)
    REFERENCES oms_schema.orders (order_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS oms_schema.supplier_retailer
    ADD CONSTRAINT order_guid_rel FOREIGN KEY (order_guid)
    REFERENCES oms_schema.orders (order_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS product_schema.product
    ADD CONSTRAINT product_category_rel FOREIGN KEY (category_id)
    REFERENCES product_schema.category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product_schema.product
    ADD CONSTRAINT product_product_type_rel FOREIGN KEY (type_id)
    REFERENCES product_schema.product_type (type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_inventory_schema.stock
    ADD CONSTRAINT rp_rel FOREIGN KEY (retailer_product_uid)
    REFERENCES rms_inventory_schema.retailer_product (retailer_product_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.address
    ADD CONSTRAINT address_store_id_rel FOREIGN KEY (store_id)
    REFERENCES rms_schema.store (store_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.connect_supplier
    ADD CONSTRAINT connect_status_rel FOREIGN KEY (connect_status_id)
    REFERENCES rms_schema.connect_status (connect_status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.connect_supplier
    ADD CONSTRAINT supplier_store_rel FOREIGN KEY (store_id)
    REFERENCES rms_schema.store (store_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.contact
    ADD CONSTRAINT contact_store_rel FOREIGN KEY (store_id)
    REFERENCES rms_schema.store (store_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.licence
    ADD CONSTRAINT licence_licence_type_rel FOREIGN KEY (licence_type_id)
    REFERENCES rms_schema.licence_type (licence_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.licence
    ADD CONSTRAINT licence_store_rel FOREIGN KEY (store_id)
    REFERENCES rms_schema.store (store_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.stock
    ADD CONSTRAINT stock_retailer_product_rel FOREIGN KEY (retailer_product_uid)
    REFERENCES rms_schema.retailer_product (retailer_product_uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS rms_schema.store
    ADD CONSTRAINT store_retailer_rel FOREIGN KEY (retailer_guid)
    REFERENCES rms_schema.retailer (retailer_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS rms_schema.store
    ADD CONSTRAINT store_store_type_rel FOREIGN KEY (store_type_id)
    REFERENCES rms_schema.store_type (store_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS staff_schema.address
    ADD CONSTRAINT staff_rel FOREIGN KEY (staff_guid)
    REFERENCES staff_schema.staff (staff_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS staff_schema.contact
    ADD CONSTRAINT contact_staff_rel FOREIGN KEY (staff_guid)
    REFERENCES staff_schema.staff (staff_guid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;